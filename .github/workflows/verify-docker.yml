name: VerifyDocker

on:
  workflow_dispatch:

jobs:
  prep:
    outputs:
      docker-images: ${{ steps.set-docker-images.outputs.docker-images }}
    runs-on: ubuntu-latest
    steps:
      - id: set-docker-images
        run: |
          echo docker-images='{ "image": ["one", "two"] }' >> $GITHUB_OUTPUT

  buildDocker:
    needs: [ prep ]
    strategy:
      matrix: ${{ fromJSON(needs.prep.outputs.docker-images) }}
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.6.1

      - name: Build image
        uses: docker/build-push-action@v6.7.0
        with:
          context: '{{defaultContext}}:src/${{ matrix.image }}'
          push: false
          tags: ${{ matrix.image }}
          outputs: type=docker,dest=/tmp/${{ matrix.image }}.tar

      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.image }}
          path: /tmp/${{ matrix.image }}.tar

  verifyDocker:
    needs: [ prep, buildDocker ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download images and load them into Docker
        run: |
          imageNames=$(echo ${{ toJSON(needs.prep.outputs.docker-images) }} | jq -r '.image | join(" ")')
          for image in $imageNames; do
            echo "Preparing Docker image: $image"
            gh run download ${{ github.run_id }} --dir /tmp --name $image
            docker load --input /tmp/$image.tar
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Invoke hook
        run: |
          # chmod +x ./src/verify-docker.sh
          # ./src/verify-docker.sh
          
          # Simulate failing the hook
          exit 1

  debug:
    needs: [ verifyDocker ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Debug verify docker result
        run: |
          echo ${{needs.verifyDocker.result}}

  pushDocker:
    needs: [ prep, verifyDocker ]
    if: always() && needs.verifyDocker.result == 'failure'
    strategy:
      matrix: ${{ fromJSON(needs.prep.outputs.docker-images) }}
    runs-on: ubuntu-latest
    steps:
      - name: Download image
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.image }}
          path: /tmp

      - name: Load image in Docker
        run: |
          docker load --input /tmp/${{ matrix.image }}.tar
          docker image ls

      - name: Push image
        uses: docker/build-push-action@v6.7.0
        with:
          context: '{{defaultContext}}:src/${{ matrix.image }}'
          push: true
          tags: ${{ matrix.image }}:latest
